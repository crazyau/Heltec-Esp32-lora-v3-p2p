/**
 * LoRa Packet Send/Receive with 3 Digital Inputs, OLED Display, and Diagnostics
 * Displays local and remote digital input states on screen test
 * Compatible with Heltec WiFi LoRa 32 V3
 * working version with inputs and outputs
 */

#define HELTEC_POWER_BUTTON
#include <heltec_unofficial.h>
#include "images.h"

// === Configuration ===
// const int PAUSE = 3; // No longer needed for fixed 10-second interval, can be removed or repurposed
const float FREQUENCY = 915.0;
const float BANDWIDTH = 500.0;
const int SPREADING_FACTOR = 9;
const int TRANSMIT_POWER = 22;
const int NO_RX_TIMEOUT_PIN = 45;
const unsigned long RX_TIMEOUT_MS = 20000;  // 20 seconds


const int DIGITAL_INPUT_PIN1 = 5;
const int DIGITAL_INPUT_PIN2 = 6;
const int DIGITAL_INPUT_PIN3 = 7;
const int remoteOutputPins[] = { 40, 41, 42 };  // New outputs controlled by remote inputs
//const int BATTERY_PIN = 39;

const int MIN_PAUSE_FACTOR = 50;                                  //was 100
const unsigned long PERIODIC_TRANSMIT_INTERVAL_MS = 10 * 1000UL;  // 10 seconds

// === Globals ===
String rxdata;
volatile bool rxFlag = false;
uint64_t last_rx_time = 0;  // Time of last valid receive

long counter = 0;
uint64_t last_tx = 0;                // This still tracks the last *actual* transmission for airtime limits
uint64_t last_periodic_tx_time = 0;  // New variable for the 10-second interval
uint64_t tx_duration_ms;
uint64_t minimum_pause_ms = 0;

int currentDigitalInputState1 = -1;
int previousDigitalInputState1 = -1;
int currentDigitalInputState2 = -1;
int previousDigitalInputState2 = -1;
int currentDigitalInputState3 = -1;
int previousDigitalInputState3 = -1;

int receivedDigitalInputState1 = -1;
int receivedDigitalInputState2 = -1;
int receivedDigitalInputState3 = -1;

float batteryVoltage = 0.0;
int txFailures = 0;
int rxFailures = 0;
int malformedPackets = 0;

float readBatteryVoltage() {
  return heltec_vbat();
}

void logo() {
  display.clear();
  display.drawXbm(0, 0, AUSTRALIA_WIDTH, AUSTRALIA_HEIGHT, australia_map_bits);
  display.display();
  delay(3000);
  display.clear();
  display.display();
}

String stateToString(int val) {
  return val == HIGH ? "HIGH" : "LOW";
}

void displayInputStates() {
  display.clear();
  display.setTextAlignment(TEXT_ALIGN_LEFT);
  display.setFont(ArialMT_Plain_10);
  display.drawString(0, 0, "Local:");
  display.drawString(0, 12, "1: " + stateToString(currentDigitalInputState1));
  display.drawString(42, 12, "2: " + stateToString(currentDigitalInputState2));
  display.drawString(84, 12, "3: " + stateToString(currentDigitalInputState3));

  display.drawString(0, 24, "Remote:");
  display.drawString(0, 36, "1: " + stateToString(receivedDigitalInputState1));
  display.drawString(42, 36, "2: " + stateToString(receivedDigitalInputState2));
  display.drawString(84, 36, "3: " + stateToString(receivedDigitalInputState3));
  // NEW: Show RX Timeout status
  if (millis() - last_rx_time > RX_TIMEOUT_MS) {
    display.drawString(0, 48, "RX: TIMEOUT");
  } else {
    display.drawString(0, 48, "RX: OK");
  }
  display.display();
}

void setup() {
  heltec_setup();
  heltec_ve(true);
  logo();
  both.println("Radio init");

  int status = radio.begin();
  if (status != RADIOLIB_ERR_NONE) {
    both.printf("Radio.begin() failed, code %d\n", status);
    while (true)
      ;
  }
  radio.setDio1Action(rx);

  radio.setFrequency(FREQUENCY);
  radio.setBandwidth(BANDWIDTH);
  radio.setSpreadingFactor(SPREADING_FACTOR);
  radio.setOutputPower(TRANSMIT_POWER);
  radio.startReceive(RADIOLIB_SX126X_RX_TIMEOUT_INF);

  pinMode(DIGITAL_INPUT_PIN1, INPUT_PULLUP);
  pinMode(DIGITAL_INPUT_PIN2, INPUT_PULLUP);
  pinMode(DIGITAL_INPUT_PIN3, INPUT_PULLUP);
  //pinMode(BATTERY_PIN, INPUT);
  pinMode(40, OUTPUT);
  pinMode(41, OUTPUT);
  pinMode(42, OUTPUT);
  pinMode(NO_RX_TIMEOUT_PIN, OUTPUT);
  digitalWrite(NO_RX_TIMEOUT_PIN, LOW);  // Default LOW


  // Initialize last_periodic_tx_time to prevent immediate transmission on boot
  last_periodic_tx_time = millis();
}

void loop() {
  heltec_loop();

  currentDigitalInputState1 = digitalRead(DIGITAL_INPUT_PIN1);
  currentDigitalInputState2 = digitalRead(DIGITAL_INPUT_PIN2);
  currentDigitalInputState3 = digitalRead(DIGITAL_INPUT_PIN3);
  batteryVoltage = readBatteryVoltage();

  bool digitalChanged =
    currentDigitalInputState1 != previousDigitalInputState1 || currentDigitalInputState2 != previousDigitalInputState2 || currentDigitalInputState3 != previousDigitalInputState3;

  previousDigitalInputState1 = currentDigitalInputState1;
  previousDigitalInputState2 = currentDigitalInputState2;
  previousDigitalInputState3 = currentDigitalInputState3;

  displayInputStates();  // Update OLED always
  digitalWrite(40, receivedDigitalInputState1);
  digitalWrite(41, receivedDigitalInputState2);
  digitalWrite(42, receivedDigitalInputState3);

  // Check for transmit conditions:
  // 1. Enough time has passed since the last transmission (airtime legal limit)
  // 2. Either 10 seconds have passed, OR a digital input has changed, OR the button was clicked
  bool tx_legal = millis() - last_tx > max(minimum_pause_ms, (uint64_t)(100UL));  // Using a small base minimum pause
  bool periodic_time_elapsed = millis() - last_periodic_tx_time >= PERIODIC_TRANSMIT_INTERVAL_MS;

  if (tx_legal && (periodic_time_elapsed || digitalChanged || button.isSingleClick())) {
    // If the transmission is triggered by a periodic interval, update its timer
    if (periodic_time_elapsed) {
      last_periodic_tx_time = millis();
    }
    // If triggered by digitalChange or button, the next periodic send might happen earlier
    // than the 10 seconds from *this* moment, but it ensures at least 10 seconds between *periodic* sends.
    // If you want it to always reset the 10-second timer on *any* send:
    // last_periodic_tx_time = millis();

    if (counter >= 1000) { counter = 0; }
    char message[64];
    snprintf(message, sizeof(message), "%d,%d,%d,%d,%.2f", counter++,
             currentDigitalInputState1,
             currentDigitalInputState2,
             currentDigitalInputState3,
             batteryVoltage);

    both.printf("TX [%s] ", message);

    radio.clearDio1Action();
    heltec_led(50);
    uint64_t transmit_start_time = millis();
    int tx_status = radio.transmit(message);
    tx_duration_ms = millis() - transmit_start_time;
    heltec_led(0);

    if (tx_status == RADIOLIB_ERR_NONE) {
      both.printf("OK (%i ms)\n", (int)tx_duration_ms);
    } else {
      both.printf("fail (%i)\n", tx_status);
      txFailures++;
    }

    minimum_pause_ms = tx_duration_ms * MIN_PAUSE_FACTOR;
    last_tx = millis();
    radio.setDio1Action(rx);
    radio.startReceive(RADIOLIB_SX126X_RX_TIMEOUT_INF);
  }

  if (rxFlag) {
    rxFlag = false;
    int read_status = radio.readData(rxdata);
    if (read_status == RADIOLIB_ERR_NONE) {
      int i1 = rxdata.indexOf(',');
      int i2 = rxdata.indexOf(',', i1 + 1);
      int i3 = rxdata.indexOf(',', i2 + 1);
      int i4 = rxdata.indexOf(',', i3 + 1);
      last_rx_time = millis();

      if (i1 != -1 && i2 != -1 && i3 != -1 && i4 != -1) {
        String input1Str = rxdata.substring(i1 + 1, i2);
        String input2Str = rxdata.substring(i2 + 1, i3);
        String input3Str = rxdata.substring(i3 + 1, i4);

        receivedDigitalInputState1 = input1Str.toInt();
        receivedDigitalInputState2 = input2Str.toInt();
        receivedDigitalInputState3 = input3Str.toInt();
        both.printf("RX: %s\n", rxdata.c_str());
        displayInputStates();  // Update display with new remote values
      } else {
        malformedPackets++;
        both.printf("Malformed RX: %s\n", rxdata.c_str());
      }
    } else {
      rxFailures++;
      both.printf("radio.readData() failed, code %d\n", read_status);
    }

    radio.startReceive(RADIOLIB_SX126X_RX_TIMEOUT_INF);
  }

  static uint32_t lastDiagPrint = 0;
  if (millis() - lastDiagPrint > 30000) {
    both.printf("=== Diagnostics ===\n");
    both.printf("    TX Failures: %d\n", txFailures);
    both.printf("    RX Failures: %d\n", rxFailures);
    both.printf("    Malformed Packets: %d\n", malformedPackets);
    both.printf("    Battery Voltage: %.2f V\n", batteryVoltage);
    lastDiagPrint = millis();
    both.printf("    ",RX_TIMEOUT_MS);
  }
  if (millis() - last_rx_time > RX_TIMEOUT_MS) {
    digitalWrite(NO_RX_TIMEOUT_PIN, HIGH);  // No packet received in 20 sec
  } else {
    digitalWrite(NO_RX_TIMEOUT_PIN, LOW);  // Packet received recently
  }
}

void rx() {
  rxFlag = true;
}
